# backjoon 2485번 가로수 / 유클리드 호제법
# 2023-08-25 AN

import sys
input = sys.stdin.readline

# 최대공약수를 구하는 함수 
def gcd(a,b):
    if(b==0):
        return a
    else:
        return gcd(b, a%b)
    
# 숫자 N, M이 존재(N > M)할 때,
# L = N % M  
# 이 때, N와 M의 최대 공약수는 M와 L의 최대 공약수와 같음
# -> 이를 반복하여 L == 0이 될 때의 M

# 최소공배수 구하는 방법
# 숫자 M * 숫자 N / 최대공약수
# N * M / G  -->  이건 개념 퍼온거에용

# 심어진 가로수 수(주어진 예제 1에서는 4)
n = int(input()) # 4

# 가장 앞에 있는 가로수
a = int(input()) # 1 -> 3 -> 7 -> 13

# 가로수 사이의 거리
arr = [] # [ 2,4,6 ]
for i in range(1, n): # 4개가 입력될때까지 하지만 4는 포함하지 않음(그 전에 들어가니까)
    t = int(input()) # 3 -> 7 -> 13
    arr.append(t-a) # 3-1 -> 7-3 -> 13-7
    a = t # 2 -> 4 -> 6

# 가로수 사이의 거리의 최대 공약수 // 가로수의 최솟값을 구해야하면 거리는 최대여야한다고 생각
m = arr[0] # 2 => 위치 초기화
for i in arr: # [ 2,4,6 ] 간격리스트
    m = gcd(m, i) # 실질적 위치 확인
    
# 가로수 사이의 거리에 최대 공약수를 나누면 된다.
cnt = 0
for i in arr:
    cnt += (i//m) -1  # 가로수간격 사이에 나무 심은 횟수 카운트 ==>>> 개수 = 간격 // 최대공약수 - 1
    
print(cnt)

